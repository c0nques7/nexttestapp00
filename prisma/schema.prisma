generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

model site_users {
  id       String  @id @default(cuid())
  email    String  @unique
  username String  @unique
  password String
  mySubs   String[]
  userPost String  @default(uuid())
}

model User {
  id             Int         @id @default(autoincrement())
  username       String      @unique
  email          String      @unique
  passwordHash   String
  isVerified   Boolean  @default(true)
  role           Role
  ethereumAddress String?  
  posts          Post[]
  votes          Vote[]
  comments        Comment[]
  following      Follow[]    @relation("following")
  followers      Follow[]    @relation("followedBy")
  moderatorIn    Moderator[]
  flags          Flag[]
  tickers   Ticker[] // One-to-Many relation
  settings  Json? 

  @@map("users")
}

model Comment {
  id         Int      @id @default(autoincrement())
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  postId     Int
  post       Post     @relation(fields: [postId], references: [id])
  content    String
  timestamp  DateTime @default(now())
  parentId   Int?
  parent     Comment? @relation("replies", fields: [parentId], references: [id], onDelete: Restrict, onUpdate: Restrict ) 
  replies    Comment[] @relation("replies")
  votes      Vote[]    @relation("commentVotes") 
  flags      Flag[]    @relation("commentFlags") 

  @@map("comments")
}

model Post {
  id             Int       @id @default(autoincrement())
  userId         Int?
  user           User?      @relation(fields: [userId], references: [id])
  content        String
  channelId      Int?
  channel        Channel?  @relation(fields: [channelId], references: [id])
  timestamp      DateTime  @default(now())
  isPublic       Boolean   @default(true)
  postType       PostType
  contentProvider       ContentProvider 
  mediaUrl       String?
  transactionHash String?  @unique
  votes           Vote[]
  comments        Comment[]
  flags           Flag[]

  @@map("posts")
}

model Vote {
  id             Int       @id @default(autoincrement())
  userId         Int
  user           User      @relation(fields: [userId], references: [id])
  postId         Int
  post           Post      @relation(fields: [postId], references: [id])
  voteValue      Int
  transactionHash String?
  commentId Int?
  comment   Comment? @relation("commentVotes", fields: [commentId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@map("votes")
}

model Channel {
  id             Int         @id @default(autoincrement())
  name       String    @unique
  posts      Post[]
  moderators Moderator[]

  @@map("channels")
}

model Moderator {
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  channelId Int
  channel   Channel   @relation(fields: [channelId], references: [id])

  @@id([userId, channelId])
  @@map("moderators")
}

model Flag {
  id     Int    @id @default(autoincrement())
  userId Int
  user   User   @relation(fields: [userId], references: [id])
  postId Int
  post   Post   @relation(fields: [postId], references: [id])
  reason String
  commentId Int?
  comment   Comment? @relation("commentFlags", fields: [commentId], references: [id], onDelete: SetNull)

  @@map("flags")
}

model Follow {
  followerId Int
  followedId Int
  follower   User @relation("following", fields: [followerId], references: [id], onDelete: Cascade)
  followed   User @relation("followedBy", fields: [followedId], references: [id], onDelete: Cascade)

  @@id([followerId, followedId])
}

model Ticker {
  id     Int     @id @default(autoincrement())
  symbol String  @unique
  user   User   @relation(fields: [userId], references: [id])
  userId Int
}

enum Role {
  STANDARD
  MODERATOR
  ADMIN
  CORPORATE
}

enum PostType {
  TEXT
  IMAGE
  VIDEO
}

enum ContentProvider {
  YOUTUBE
  INSTAGRAM
  TWITTER
  FACEBOOK
  REDDIT
  TELEGRAM
  SPOTIFY
  PEAKEFEED
}